#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define U_TAPPING_TERM 200
#define ENG        0
#define RUS        1
#define QWERTY     2
#define JCUKEN     3
#define SYM_ENG    4
#define SYM_RUS    5
#define NAV_ENG    6
#define NAV_RUS    7
#define NUM_ENG    8
#define NUM_RUS    9
#define AUTO_MOUSE 10
#define SCROLL     11

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    macros {
        ruen_en: ruen_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to 0 &kp LA(LSHFT)>
                ;
        };
        ruen_ru: ruen_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to 1 &kp LA(LSHFT)>
                ;
        };
        en: en {
            wait-ms = <20>;
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_tap &kp LA(LSHFT)>, <&macro_param_1to1>, <&macro_tap &kp MACRO_PLACEHOLDER>, <&macro_tap &kp LA(LSHFT)>;
        };
        sh: sh {
            wait-ms = <20>;
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_press &kp LSHFT>, <&macro_param_1to1>, <&macro_tap &kp MACRO_PLACEHOLDER>, <&macro_release &kp LSHFT>;
        };
        ensh: ensh {
            wait-ms = <20>;
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_tap &kp LA(LSHFT)>, <&macro_param_1to1>, <&macro_tap &sh MACRO_PLACEHOLDER>, <&macro_tap &kp LA(LSHFT)>;
        };
        ru_semi: en_semi {
            wait-ms = <20>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LSHFT)>, <&kp SEMI>, <&kp LA(LSHFT)>;
        };
        ru_colon: ru_colon {
            wait-ms = <20>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LA(LSHFT)>,  <&macro_press &kp LSHFT>, <&macro_tap &kp COLON>, <&macro_release &kp LSHFT>, <&macro_tap &kp LA(LSHFT)>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        LeftClickRight {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        RightClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
        };

        MiddleClickRight {
            bindings = <&mkp MCLK>;
            key-positions = <21 22>;
        };

        ParaLeft {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 16>;
        };

        ParaRight {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 19>;
        };

        BrakLeft {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 15>;
        };

        BrakRight {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 20>;
        };

        BraceLeft {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 14>;
        };

        BraceRight {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <9 21>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };
    };

    behaviors {
        hrm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ENG {
            bindings = <
                &trans     &kp N1         &kp N2       &kp N3        &kp N4             &kp N5           &kp N6             &kp N7              &kp N8         &kp N9     &kp N0        &kp N0
                &kp ESC    &kp J          &kp L        &kp D         &kp B              &kp W            &kp V              &kp P               &kp O          &kp U      &kp APOS      &trans
                &kp SEMI   &lt SYM_ENG R  &hrm LALT N  &hrm LSHIFT T &hrm LCTRL S       &hrm LGUI G      &mt LGUI K         &mt LCTRL H         &mt LSHIFT A   &mt LALT E &lt SYM_ENG I &kp DOT
                &kp COLON  &kp Q          &kp X        &kp M         &kp C              &kp Z            &kp Y              &kp F               &kp UNDER      &kp FSLH   &kp GRAVE     &kp COMMA
                           &kp TAB        &kp RCLK     &kp BACKSPACE &lt NAV_ENG SPACE  &kp LCLK         &kp TAB            &lt NUM_ENG ENTER   &ruen_ru
            >;
        };

        RUS {
            bindings = <
                &en SEMI      &sh N1        &kp N2       &kp N3        &kp N4             &kp N5           &kp N6             &kp N7              &kp N8         &kp N9     &kp N0           &kp N1
                &ensh SEMI    &kp Q         &kp K        &kp L         &kp COMMA          &kp O            &kp I              &kp G               &kp J          &kp E      &kp DOT          &kp APOS
                &ru_semi   &lt SYM_RUS H &hrm LALT  Y &hrm LSHIFT N &hrm LCTRL C       &hrm LGUI U      &mt LGUI R         &mt LCTRL D         &mt LSHIFT F   &mt LALT T &lt SYM_RUS B    &kp FSLH
                &ru_colon  &kp W         &kp LBKT     &kp V         &kp X              &kp P            &kp SEMI           &kp A               &kp S          &kp Z      &kp M            &kp LS(FSLH)
                           &kp TAB       &kp RCLK     &kp BACKSPACE &lt NAV_ENG SPACE  &kp LCLK         &kp TAB            &lt NUM_ENG ENTER   &ruen_en
            >;
        };

        QWERTY {
            bindings = <
                &kp PSCRN  &kp N1     &kp N2     &kp N3        &kp N4             &kp N5           &kp N6             &kp N7     &kp N8         &kp N9     &kp N0     &kp N2
                &kp ESC    &kp J      &kp L      &kp D         &kp B              &kp W            &kp V              &kp P      &kp O          &kp U      &kp P      &trans
                &kp SEMI   &kp R      &kp N      &kp T         &kp S              &kp G            &kp K              &kp H      &kp A          &kp E      &kp I      &kp DOT
                &kp COLON  &kp Q      &kp X      &kp M         &kp C              &kp Z            &kp Y              &kp F      &kp UNDER      &kp FSLH   &kp GRAVE  &kp COMMA
                           &kp TAB    &kp RCLK   &kp BACKSPACE &lt NAV_ENG SPACE  &kp LCLK         &lt NUM_ENG ENTER  &kp TAB    &kp LA(LSHIFT)
            >;
        };

        JCUKEN {
            bindings = <
                &kp PSCRN  &kp N1     &kp N2     &kp N3        &kp N4             &kp N5           &kp N6             &kp N7     &kp N8         &kp N9     &kp N0     &kp N3
                &kp ESC    &kp J      &kp L      &kp D         &kp B              &kp W            &kp V              &kp P      &kp O          &kp U      &kp P      &trans
                &kp SEMI   &kp R      &kp N      &kp T         &kp S              &kp G            &kp K              &kp H      &kp A          &kp E      &kp I      &kp DOT
                &kp COLON  &kp Q      &kp X      &kp M         &kp C              &kp Z            &kp Y              &kp F      &kp UNDER      &kp FSLH   &kp GRAVE  &kp COMMA
                           &kp TAB    &kp RCLK   &kp BACKSPACE &lt NAV_ENG SPACE  &kp LCLK         &lt NUM_ENG ENTER  &kp TAB    &kp LA(LSHIFT)
            >;
        };

        SYM_ENG {
            bindings = <
                &kp PSCRN  &kp N1     &kp N2           &kp N3        &kp N4             &kp N5           &kp N6             &kp N7              &kp N8         &kp N9     &kp N0     &kp N4
                &kp ESC    &kp J      &kp LEFT_BRACKET &kp PERCENT   &kp RIGHT_BRACKET  &kp DQT          &kp QUESTION       &kp LBRC            &sh N1         &kp RBRC   &kp APOS   &trans
                &kp SEMI   &kp DOLLAR &kp LPAR         &kp ASTRK     &kp RPAR           &kp PLUS         &kp MINUS          &kp LT              &kp EQUAL      &kp GT     &sh N2     &kp DOT
                &kp COLON  &none      &kp BSLH         &kp TILDE     &kp PIPE           &kp CARET        &kp AMPS           &kp HASH            &kp UNDER      &kp FSLH   &kp GRAVE  &kp COMMA
                           &kp TAB    &kp RCLK         &kp BACKSPACE &lt NAV_ENG SPACE  &kp LCLK         &kp TAB            &lt NUM_ENG ENTER   &kp LA(LSHIFT)
            >;
        };

        SYM_RUS {
            bindings = <
                &kp PSCRN  &kp N1     &kp N2           &kp N3        &kp N4             &kp N5           &kp N6             &kp N7              &kp N8         &kp N9     &kp N0     &kp N5
                &kp ESC    &kp J      &kp LEFT_BRACKET &kp PERCENT   &kp RIGHT_BRACKET  &kp DQT          &kp QUESTION       &kp LBRC            &sh N1         &kp RBRC   &kp APOS   &trans
                &kp SEMI   &kp DOLLAR &kp LPAR         &kp ASTRK     &kp RPAR           &kp PLUS         &kp MINUS          &kp LT              &kp EQUAL      &kp GT     &ensh N2     &kp DOT
                &kp COLON  &none      &kp BSLH         &kp TILDE     &kp PIPE           &kp CARET        &kp AMPS           &kp HASH            &kp UNDER      &kp FSLH   &kp GRAVE  &kp COMMA
                           &kp TAB    &kp RCLK         &kp BACKSPACE &lt NAV_ENG SPACE  &kp LCLK         &lt NUM_ENG ENTER  &kp TAB             &kp LA(LSHIFT)
            >;
        };

        NAV_ENG {
            bindings = <
                &kp PSCRN  &kp N1     &kp N2     &kp N3        &kp N4             &kp N5           &kp N6             &kp N7          &kp N8         &kp N9      &kp N0     &kp N6
                &kp ESC    &kp J      &kp L      &kp LC(F)     &kp LC(R)          &kp W            &kp K_CMENU        &kp LC(LS(TAB)) &kp PG_UP      &kp LC(TAB) &kp P      &none
                &kp SEMI   &kp LC(A)  &kp LALT   &kp LSHIFT    &kp LCTRL          &kp LC(FSLH)     &kp HOME           &kp LEFT        &kp UP         &kp DOWN    &kp RIGHT  &kp END
                &kp COLON  &kp LC(Z)  &kp LC(X)  &kp LC(C)     &kp LC(V)          &kp Z            &kp Y              &kp F           &kp UNDER      &kp PG_DN   &kp APOS   &none
                           &kp TAB    &kp RCLK   &kp BACKSPACE &lt NAV_ENG SPACE  &kp LCLK         &lt NUM_ENG ENTER  &kp TAB         &kp LA(LSHIFT)
            >;
        };

        NAV_RUS {
            bindings = <
                &none      &kp N1     &kp N2     &kp N3        &kp N4             &kp N5           &kp N6             &kp N7          &kp N8         &kp N9      &kp N0     &kp N7
                &kp ESC    &none      &none      &kp LC(F)     &kp LC(R)          &none            &kp K_CMENU        &kp LC(LS(TAB)) &kp PG_UP      &kp LC(TAB) &kp APOS   &none
                &none      &kp LC(A)  &kp LALT   &kp LSHIFT    &kp LCTRL          &kp LC(FSLH)     &kp HOME           &kp LEFT        &kp UP         &kp DOWN    &kp RIGHT  &kp END
                &none      &kp LC(Z)  &kp LC(X)  &kp LC(C)     &kp LC(V)          &kp K_CMENU      &none              &none           &none          &kp PG_DN   &none      &none
                           &kp TAB    &kp RCLK   &kp BACKSPACE &lt NAV_ENG SPACE  &kp LCLK         &lt NUM_ENG ENTER  &kp TAB         &none
            >;
        };

        NUM_ENG {
            bindings = <
                &kp PSCRN  &kp N1     &kp N2     &kp N3        &kp N4             &kp N5           &kp N6             &kp N7     &kp N8         &kp N9     &kp N0     &kp N8
                &kp ESC    &trans     &kp F7     &kp F8        &kp F9             &kp F10          &trans             &kp N7     &kp N8         &kp N9     &kp APOS   &trans
                &trans     &trans     &kp F4     &kp F5        &kp F6             &kp F11          &kp MINUS          &kp N4     &kp N5         &kp N6     &kp N0     &kp DOT
                &trans     &trans     &kp F1     &kp F2        &kp F3             &kp F12          &trans             &kp N1     &kp N2         &kp N3     &kp GRAVE  &kp COMMA
                           &kp TAB    &kp RCLK   &kp BACKSPACE &lt NAV_ENG SPACE  &kp LCLK         &lt NUM_ENG ENTER  &kp TAB    &kp LA(LSHIFT)
            >;
        };

        NUM_RUS {
            bindings = <
                &kp PSCRN  &kp N1     &kp N2     &kp N3        &kp N4             &kp N5           &kp N6             &kp N7     &kp N8         &kp N9     &kp N0     &kp N9
                &kp ESC    &kp J      &kp L      &kp D         &kp B              &kp W            &kp V              &kp P      &kp O          &kp U      &kp P      &trans
                &kp SEMI   &kp R      &kp N      &kp T         &kp S              &kp G            &kp K              &kp H      &kp A          &kp E      &kp I      &kp DOT
                &kp COLON  &kp Q      &kp X      &kp M         &kp C              &kp Z            &kp Y              &kp F      &kp UNDER      &kp FSLH   &kp GRAVE  &kp COMMA
                           &kp TAB    &kp RCLK   &kp BACKSPACE &lt NAV_ENG SPACE  &kp LCLK         &lt NUM_ENG ENTER  &kp TAB    &kp LA(LSHIFT)
            >;
        };

        AUTO_MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp LCLK  &trans  &mkp RCLK    &trans  &trans &trans  &trans &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans &trans  &trans &trans
            >;
        };


    };
};
